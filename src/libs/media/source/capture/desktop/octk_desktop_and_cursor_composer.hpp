/***********************************************************************************************************************
**
** Library: OpenCTK
**
** Copyright (C) 2025~Present ChengXueWen.
**
** License: MIT License
**
** Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
** documentation files (the "Software"), to deal in the Software without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
** and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
**
** The above copyright notice and this permission notice shall be included in all copies or substantial portions
** of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
** TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
** CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
** IN THE SOFTWARE.
**
***********************************************************************************************************************/

#ifndef _OCTK_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_HPP
#define _OCTK_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_HPP

#include <octk_desktop_capture_options.hpp>
#include <octk_desktop_capture_types.hpp>
#include <octk_desktop_capturer.hpp>
#include <octk_desktop_frame.hpp>
#include <octk_desktop_geometry.hpp>
#include <octk_mouse_cursor.hpp>
#include <octk_mouse_cursor_monitor.hpp>
#include <octk_shared_memory.hpp>
#if defined(OCTK_USE_GIO)
#   include <octk_desktop_capture_metadata.hpp>
#endif  // defined(OCTK_USE_GIO)

#include <memory>

OCTK_BEGIN_NAMESPACE

// A wrapper for DesktopCapturer that also captures mouse using specified
// MouseCursorMonitor and renders it on the generated streams.
class OCTK_MEDIA_API DesktopAndCursorComposer
    : public DesktopCapturer, public DesktopCapturer::Callback, public MouseCursorMonitor::Callback
{
public:
    // Creates a new composer that captures mouse cursor using
    // MouseCursorMonitor::Create(options) and renders it into the frames
    // generated by `desktop_capturer`.
    DesktopAndCursorComposer(std::unique_ptr<DesktopCapturer> desktop_capturer,
                             const DesktopCaptureOptions &options);

    ~DesktopAndCursorComposer() override;

    DesktopAndCursorComposer(const DesktopAndCursorComposer &) = delete;
    DesktopAndCursorComposer &operator=(const DesktopAndCursorComposer &) = delete;

    // Creates a new composer that relies on an external source for cursor shape
    // and position information via the MouseCursorMonitor::Callback interface.
    static std::unique_ptr<DesktopAndCursorComposer>
    CreateWithoutMouseCursorMonitor(
        std::unique_ptr<DesktopCapturer> desktop_capturer);

    // DesktopCapturer interface.
    void start(DesktopCapturer::Callback *callback) override;
    void SetSharedMemoryFactory(
        std::unique_ptr<SharedMemoryFactory> shared_memory_factory) override;
    void CaptureFrame() override;
    void SetExcludedWindow(WindowId window) override;
    bool GetSourceList(SourceList *sources) override;
    bool SelectSource(SourceId id) override;
    bool FocusOnSelectedSource() override;
    bool IsOccluded(const DesktopVector &pos) override;
    void SetMaxFrameRate(uint32_t max_frame_rate) override;
#if defined(OCTK_USE_GIO)
    DesktopCaptureMetadata GetMetadata() override;
#endif  // defined(OCTK_USE_GIO)

    // MouseCursorMonitor::Callback interface.
    void OnMouseCursor(MouseCursor *cursor) override;
    void OnMouseCursorPosition(const DesktopVector &position) override;

private:
    // Allows test cases to use a fake MouseCursorMonitor implementation.
    friend class DesktopAndCursorComposerTest;

    // Constructor to delegate both deprecated and new constructors and allows
    // test cases to use a fake MouseCursorMonitor implementation.
    DesktopAndCursorComposer(DesktopCapturer *desktop_capturer,
                             MouseCursorMonitor *mouse_monitor);

    // DesktopCapturer::Callback interface.
    void OnFrameCaptureStart() override;
    void OnCaptureResult(DesktopCapturer::Result result,
                         std::unique_ptr<DesktopFrame> frame) override;

    const std::unique_ptr<DesktopCapturer> desktop_capturer_;
    const std::unique_ptr<MouseCursorMonitor> mouse_monitor_;

    DesktopCapturer::Callback *callback_;

    std::unique_ptr<MouseCursor> cursor_;
    DesktopVector cursor_position_;
    DesktopRect previous_cursor_rect_;
    bool cursor_changed_ = false;
};
OCTK_END_NAMESPACE

#endif  // _OCTK_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_HPP
